resilience4j.retry:
  instances:
    flightSearch:
      # The maximum number of retry attempt
      maxAttempts: 3
      # Initial interval between retry attempts
      waitDuration: 2s
      
    # Retry object used in RetryingService.basicExample()
    basic:
      maxAttempts: 3
      waitDuration: 2s

    # Retry object used in RetryingService.fallbackExample()
    fallbackExample:
      maxAttempts: 3
      waitDuration: 2s

    # Retry object used in RetryingService.intervalFunctionExponential()
    intervalFunctionExponentialExample:
      # Use exponential backoff strategy
      enableExponentialBackoff: true
      # Multiplier for the exponential backoff
      # Delay between retry attempts = waitDuration * exponentialBackoffMultiplier
      exponentialBackoffMultiplier: 2
      maxAttempts: 6
      waitDuration: 1s

    # Retry object used in RetryingService.intervalFunctionRandomExample()
    intervalFunctionRandomExample:
      enableRandomizedWait: true
      maxAttempts: 3
      randomizedWaitFactor: 0.5
      waitDuration: 2s

    # Retry object used in RetryingService.loggedRetryExample()
    loggedRetryExample:
      maxAttempts: 3
      waitDuration: 2s

    # Retry object used in RetryingService.predicateExample()
    predicateExample:
      maxAttempts: 3
      resultPredicate: com.demos.predicate.ConditionalRetryPredicate
      waitDuration: 3s

    # Retry object used in RetryingService.basicExample_serviceThrowingException()
    throwingException:
      maxAttempts: 3
      retryExceptions:
        - java.lang.Exception
      ignoreExceptions:
        - java.lang.ArithmeticException 
      waitDuration: 2s

        
### Bulkheads configs
resilience4j.bulkhead:  instances:    flightSearch:
      # Max amount of time a thread should be blocked
      # when attempting to enter a saturated bulkhead.
      max-wait-duration: 10ms
      # Max amount of parallel executions allowed by the bulkhead.
      max-concurrent-calls: 2


### ratelimiter configs        
resilience4j.ratelimiter:
  instances:
    flightSearch:
      # The number of permissions available during one limit refresh period.
      limitForPeriod: 2
      # After each period, the rate limiter sets its permissions count
      # back to the limitForPeriod value.
      limitRefreshPeriod: 10s
      # The default wait time a thread waits for a permission.
      timeoutDuration: 500ms
      
      
### circuit breaker configs
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 10
      waitDurationInOpenState: 10s
      failureRateThreshold: 6
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
  instances:
    flightSearch2:
      baseConfig: default
    flightSearch:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      minimumNumberOfCalls: 5
      waitDurationInOpenState: 10s
      failureRateThreshold: 5
      eventConsumerBufferSize: 10      

management:
  endpoints:
    web:
      exposure:
        include: '*'